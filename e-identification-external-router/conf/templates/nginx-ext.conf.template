server {
    listen      8001 default_server;
    location / {
        proxy_pass       https://{{ metadata_host }}:{{ metadata_port }};
        proxy_set_header Host {{ metadata_host }}:{{ metadata_port }};
    }
}

upstream  metadata_host {
    server 127.0.0.1:8001;
}

proxy_cache_path /nginx_cache keys_zone=cache:10m max_size=1g inactive=24h;
proxy_cache_key $scheme$request_method$host$request_uri;

include conf.d/log_format_configs.config;

server {
    server_name {{ ext_router_host }};
    listen 443;
    ssl on;
    ssl_certificate /etc/nginx/ssl/{{ pub_ssl_cert }};
    ssl_certificate_key /etc/nginx/ssl/{{ pub_ssl_key }};
    proxy_ssl_trusted_certificate /etc/nginx/ssl/{{ apro_ca_cert }};
    proxy_ssl_verify on;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers '{{ nginx_ciphers }}';
    proxy_ssl_ciphers '{{ nginx_ciphers }}';
    ssl_prefer_server_ciphers on;
    server_tokens off;
    ssl_verify_client off;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    ssl_session_cache shared:SSL:200m;
    keepalive_timeout 30s;
    proxy_ssl_session_reuse on;
    client_body_buffer_size 32k;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options DENY;
    add_header Content-Security-Policy "{{ content_security_policy }}" always;

    # Error handling
    proxy_intercept_errors on;
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 426 428 429 431 =404 @err404;
    error_page 500 501 502 503 504 505 506 507 511 =500 @err500;

    location /favicon.ico {
        empty_gif;
    }

    location = / {
        return 301 https://{{ ext_router_host }}/sivut/info/tietoapalvelusta/;
    }

    location @err404 {
        if ($request_uri ~ /healtcheck.html) {
            return 404;
        }
        if ($request_uri ~ /smoketest.html) {
            return 404;
        }
        rewrite ^/(.*) /sivut/404/ break;
        proxy_pass https://{{ static_host }}:{{ static_port }};
    }

    location @err500 {
        rewrite ^/(.*) /sivut/500/ break;
        proxy_pass https://{{ static_host }}:{{ static_port }};
    }

    location @errtupas404 {
        return 302 https://{{ ext_router_host }}/sivut/404/?t=null&m=tupas404;
    }
    
    location @errtupas502 {
        return 302 https://{{ ext_router_host }}/sivut/500/?t=null&m=tupas502;
    }

    # cache
    proxy_cache off;
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 301      1h;
    proxy_cache_valid any      1m;
    proxy_buffers 8            16k;

    # Block access to service-sp-metadata.xml from external networks
    location /static/metadata/service-sp-metadata.xml {
        {{ ext_router_sp_metadata_config | default('allow 127.0.0.1;') }}
        deny all;
        proxy_pass https://{{ static_host }}:{{ static_port }}/metadata/service-sp-metadata.xml;
        proxy_set_header Host $host;
    }

    # Redirects to Static Content
    location /static {
        proxy_pass https://{{ static_host }}:{{ static_port }}/;
        proxy_set_header Host $host;
    }

    # most /static/localisation: nginx cache valid for 1h, browser obeys static
    location /static/localisation {
        proxy_pass https://{{ static_host }}:{{ static_port }}/localisation;
        proxy_set_header Host $host;
        proxy_ignore_headers Cache-Control Expires;
        proxy_cache_valid 200 1h;
        proxy_cache cache;
    }

    location /sivut/ {
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/;
        proxy_set_header Host $host;
        proxy_cache_key $scheme$request_method$host$uri;
        proxy_cache cache;
    }
    location /404 {
        rewrite ^.* /sivut/404/ permanent;
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/404/;
        proxy_set_header Host $host;
    }
    location /500 {
        rewrite ^.* /sivut/500/ permanent;
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/500/;
        proxy_set_header Host $host;
    }
    location /discovery-page {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/discovery-page/;
        proxy_set_header Host $host;
    }
    location /timeout {
        rewrite ^/timeout?(.*) /sivut/timeout/?$1 permanent;
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/timeout/;
        proxy_set_header Host $host;
    }
    location /sivut/cookie {
        proxy_pass https://{{ static_host }}:{{ static_port }}/sivut/cookie/;
        proxy_set_header Host $host;
    }
    location /disruption {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ static_host }}:{{ static_port }}/resources/js/disruption_data/;
        proxy_set_header Host $host;
        proxy_ignore_headers Cache-Control Expires;
        proxy_cache_valid 200 1m;
        proxy_cache cache;
    }

    # no cache for config.js
    location = /resources/js/config.js {
        proxy_pass https://{{ static_host }}:{{ static_port }}/resources/js/config.js;
        proxy_set_header Host $host;
        proxy_ignore_headers Cache-Control Expires;
        proxy_cache_valid 200 1m;
        proxy_cache cache;
    }
    # most /resources: nginx cache valid for 1h, browser obeys static
    location /resources {
        proxy_pass https://{{ static_host }}:{{ static_port }}/resources;
        proxy_set_header Host $host;
        proxy_ignore_headers Cache-Control Expires;
        proxy_cache_valid 200 1h;
        proxy_cache cache;
    }
    # only app.js has shorter cache
    location = /resources/js/app.js {
        proxy_pass https://{{ static_host }}:{{ static_port }}/resources/js/app.js;
        proxy_set_header Host $host;
        proxy_ignore_headers Cache-Control Expires;
        proxy_cache_valid 200 10m;
        proxy_cache cache;
    }

    # setting language cookie based on locale request parameter
    location /idp/profile/SAML2/Redirect/SSO {
        set $issamlrequest 0;
        if ($args ~ "^SAMLRequest=.*&locale=(fi|sv|en)$") {
            set $issamlrequest 1;
            set $requestlocale $1;
        }

        set $cookiestatus "0";
        if ($args ~ "^execution=.*") {
            set $cookiestatus "1";
        }
        if ($cookie_JSESSIONID = "") {
            set $cookiestatus "${cookiestatus}1";
        }
        if ($cookiestatus = "11") {
            # not initial saml request and cookies are disabled, redirect to error
            return 302 https://{{ ext_router_host }}/sivut/cookie/;
        }

        if ($issamlrequest = "1") {
            add_header Set-Cookie "E-Identification-Lang=$requestlocale;;;Path=/;secure";
        }
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        add_header X-Frame-Options SAMEORIGIN;
        proxy_pass https://{{ idp_host }}:{{ idp_port }}/idp/profile/SAML2/Redirect/SSO;
        proxy_set_header Host $host;
    }

    location /idp/profile/SAML2/POST/SSO {

        set $cookiestatus "0";
        if ($args ~ "^execution=.*") {
            set $cookiestatus "1";
        }
        if ($cookie_JSESSIONID = "") {
            set $cookiestatus "${cookiestatus}1";
        }
        if ($cookiestatus = "11") {
            # not initial saml request and cookies are disabled, redirect to error
            return 302 https://{{ ext_router_host }}/sivut/cookie/;
        }
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        add_header X-Frame-Options SAMEORIGIN;
        proxy_pass https://{{ idp_host }}:{{ idp_port }}/idp/profile/SAML2/POST/SSO;
        proxy_set_header Host $host;
    }

    # Redirects to Identity Provider
    location /idp/profile {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        add_header X-Frame-Options SAMEORIGIN;
        proxy_pass https://{{ idp_host }}:{{ idp_port }}/idp/profile;
        proxy_set_header Host $host;
    }
    location /idp/authn {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ idp_host }}:{{ idp_port }}/idp/authn;
        proxy_set_header Host $host;
    }

    # Redirects to Service Provider
    location /sp-secured {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ sp_host }}:{{ sp_port }}/sp-secured;
    }
    location /sp/eidas-email {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ sp_host }}:{{ sp_port }}/eidas-email;
    }
    location /sp-error {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ sp_host }}:{{ sp_port }}/sp-error;
    }
    location /Shibboleth.sso {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ sp_host }}:{{ sp_port }}/Shibboleth.sso;
    }
    location /Shibboleth.sso/Logout {
    }

    # Redirects to TUPAS Identity Provider
    location /tupasidp/profile/SAML2 {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ tupas_idp_host }}:{{ tupas_idp_port }}/tupasidp/profile/SAML2;
        proxy_set_header Host $host;
    }

    location /tupasidp/authn/External {
        add_header Cache-Control "no-store";
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        proxy_pass https://{{ tupas_idp_host }}:{{ tupas_idp_port }}/tupasidp/authn/External;
        proxy_set_header Host $host;
        error_page 404 =404 @errtupas404;
        error_page 502 =502 @errtupas502;
    }

    # Redirects to Mobile Identity Provider
    location /mobileidp/profile/SAML2 {
        add_header Cache-Control "no-store";
        proxy_pass https://{{ mobile_idp_host }}:{{ mobile_idp_port }}/mobileidp/profile/SAML2;
        proxy_set_header Host $host;
    }

    # Redirects to feedback service
    location /feedback {
        add_header Content-Security-Policy "{{ content_security_policy }}" always;
        add_header Cache-Control "no-store";
        proxy_pass https://{{ feedback_host }}:{{ feedback_port }}/;
    }

    # Redirects to public api endpoints

    # Public metadata API
    # Only fetch by entityID is allowed, a named upstream definition is used
    # to make nginx use default resolver
    location /api/metadata {
        # Define errors here since otherwise they are passed through from this location
        limit_except GET {
            deny  all;
        }
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 426 428 429 431 =404 @err404;
        error_page 500 501 502 503 504 505 506 507 511 =500 @err500;
        proxy_cache_use_stale   error timeout updating;
        proxy_cache_valid 200 5m;
        proxy_cache cache;
        proxy_set_header Host {{ metadata_host }}:{{ metadata_port }};
        if ($request_uri ~* /api/metadata/add(.*)) {
            break;
        }
        if ($request_uri ~ /api/metadata/(.+)) {
            proxy_pass http://metadata_host/metadata/rest/metadata/$1;
            break;
        }
        error_page 404 =404 @err404;
    }

    # API to fetch eIDAS country data
    location /api/country {
        limit_except GET {
            deny  all;
        }
        # Define errors here since otherwise they are passed through from this location
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 426 428 429 431 =404 @err404;
        error_page 500 501 502 503 504 505 506 507 511 =500 @err500;
        proxy_cache_use_stale   error timeout updating;
        proxy_cache_valid 200 5m;
        proxy_cache cache;
        proxy_set_header Host {{ metadata_host }}:{{ metadata_port }};
        proxy_pass http://metadata_host/metadata/rest/country;
        error_page 404 =404 @err404;
    }

    include conf.d/per_env_configs.config;
}
